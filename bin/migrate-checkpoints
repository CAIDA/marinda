#!/usr/bin/env ruby

#############################################################################
## A utility for migrating older global server checkpoints to newer
## checkpoints.
##
## --------------------------------------------------------------------------
## Copyright (C) 2008, 2009 The Regents of the University of California.
##
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.
#############################################################################

require 'rubygems'
require 'ostruct'
require 'optparse'

require 'amalgalite'

$options = OpenStruct.new
$options.root_dir = "."

opts = OptionParser.new
opts.on("--root", "=DIR",
	"Marinda root dir (default: #{$options.root_dir})") do |v|
  $options.root_dir = v
end

opts.on("--state-db", "=PATH",
	"location of the state database file") do |v|
  $options.state_db = v
end

opts.on("-v", "--[no-]verbose", TrueClass,  "show detailed progress") do |v|
  $options.verbose = v
end

begin
  ARGV.replace opts.parse(*ARGV)
rescue OptionParser::ParseError
  $stderr.puts "ERROR: " + $!.to_s
  $stderr.puts opts
  exit 1
end

unless $options.state_db
  original_root = $options.root_dir
  $options.root_dir = File.expand_path $options.root_dir

  unless File.directory? $options.root_dir
    $stderr.puts "ERROR: Marinda root directory '#{$options.root_dir}' " +
      ($options.root_dir == original_root ? "" :
       "(expansion of '#{original_root}') ") +
      "doesn't exist or is not a directory"
    exit 1
  end

  $options.state_db = $options.root_dir + "/globalserver-state.db"
end

#===========================================================================

def open_state_database(path, &block)
  unless File.exists? path
    $stderr.printf "ERROR: missing state database file '%s'\n", path
    exit 1
  end

  retval = Amalgalite::Database.new path
  unless retval
    $stderr.printf "ERROR: couldn't open state database file '%s'\n", path
    exit 1
  end

#  retval.type_translation = true

  if block
    begin
      yield retval
    ensure
      retval.close
    end
  else
    retval
  end
end


# Migrates pre-Marinda v0.9.0 class name.
def migrate_GlobalSpaceDemux_rename(db)
  updates = []
  db.execute("SELECT checkpoint_id,session_id,seqnum,message
              FROM UnackedMessages") do |row|
    if row[3].index "Marinda::GlobalSpaceDemux::Message"
      p row
      row[3].gsub!(/Marinda::GlobalSpaceDemux::Message/,
                   "Marinda::GlobalSpace::Message")
      updates << row
    end
  end

  updates.each do |checkpoint_id,session_id,seqnum,message|
    db.execute("UPDATE UnackedMessages SET message=?
                WHERE checkpoint_id=? AND session_id=? AND seqnum=? ",
               message, checkpoint_id,session_id,seqnum)
  end
end


# Migrates pre-Ruby 1.9.x (?) Struct YAML format.
# << "--- !ruby/struct:Marinda::GlobalSpace::Message \nseqnum: 46941\ncommand: 2\ncontents: !binary |\n  AoLuYg==\n\n\"@seqnum\": \n\"@command\": \n\"@contents\": \n"
# >> "--- !ruby/struct:Marinda::GlobalSpace::Message \n:seqnum: 46941\n:command: 2\n:contents: !binary |\n  AoLuYg==\n\n"
def migrate_struct_yaml_format(db)
  updates = []
  db.execute("SELECT checkpoint_id,session_id,seqnum,message
              FROM UnackedMessages") do |row|
    lines = []
    row[3].each_line "\n" do |line|
      if line =~ /^[a-zA-Z]/
        lines << (":" + line)
      elsif line =~ /^\"@/
        # discard line
      else
        lines << line
      end
    end
    
    msg = lines.join ""
    puts
    puts "<< " + row[3].inspect
    puts ">> " + msg.inspect

    row[3] = msg
    updates << row
  end

  updates.each do |checkpoint_id,session_id,seqnum,message|
    db.execute("UPDATE UnackedMessages SET message=?
                WHERE checkpoint_id=? AND session_id=? AND seqnum=? ",
               message, checkpoint_id,session_id,seqnum)
  end
end


#===========================================================================
# MAIN
#===========================================================================

open_state_database($options.state_db) do |db|
  puts
  puts "=" * 70
  puts "Renaming GlobalSpaceDemux to GlobalSpace ..."
  puts "-" * 70
  puts
  migrate_GlobalSpaceDemux_rename db

  puts
  puts "=" * 70
  puts "Fixing Struct YAML format ..."
  puts "-" * 70
  puts
  migrate_struct_yaml_format db
end

puts
puts "### DONE."
