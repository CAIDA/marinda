#!/usr/bin/env ruby

#############################################################################
## The local Marinda server.
##
## There should be just one instance of this server running on each node of
## a given installation of Marinda.  This local server provides access to
## regions in the local tuple space and proxies access to regions in the
## global tuple space.
##
## --------------------------------------------------------------------------
## Copyright (C) 2007-2013 The Regents of the University of California.
##
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.
#############################################################################

$0 = "marinda-ls"

require 'rubygems'
require 'ostruct'
require 'optparse'
require 'thread'
require 'syslog'
require 'socket'
require 'yaml'

require 'eva'  # also provides OpenSSL on Ruby < 1.9.2
require 'marinda/utils'
require 'marinda/config'
require 'marinda/globalmux'
require 'marinda/connection'
require 'marinda/localts'

Thread.abort_on_exception = true
BasicSocket.do_not_reverse_lookup = true

$options = OpenStruct.new
$options.root_dir = "."
$options.use_lock_file = true

opts = OptionParser.new
opts.on("--root", "=DIR",
	"Marinda root dir (default: #{$options.root_dir})") do |v|
  $options.root_dir = v
end

opts.on("--process-name", "=STR",
	"process name (#{$0})") do |v|
  $options.process_name = v
end

opts.on("-d", "--[no-]detach", TrueClass,
	"run as detached (daemon) process") do |v|
  $options.detach = v
end

opts.on("-v", "--[no-]verbose", TrueClass,  "show detailed progress") do |v|
  $options.verbose = v
end

begin
  ARGV.replace opts.parse(*ARGV)
rescue OptionParser::ParseError
  $stderr.puts "ERROR: " + $!.to_s
  $stderr.puts opts
  exit 1
end

$0 = $options.process_name if $options.process_name

#===========================================================================

original_root = $options.root_dir
$options.root_dir = File.expand_path $options.root_dir

unless File.directory? $options.root_dir
  $stderr.puts "ERROR: Marinda root directory '#{$options.root_dir}' " +
    ($options.root_dir == original_root ? "" :
     "(expansion of '#{original_root}') ") +
    "doesn't exist or is not a directory"
  exit 1
end

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

$options.config_path = $options.root_dir + "/local-config.yaml"
$options.lock_file = $options.root_dir + "/localserver.LOCK"

#===========================================================================

syslog_options = Syslog::LOG_PID
syslog_options |= Syslog::LOG_PERROR unless $options.detach
$log = Syslog.open($0, syslog_options, Syslog::LOG_LOCAL0)
Syslog.mask = Syslog::LOG_UPTO(Syslog::LOG_DEBUG) if $options.verbose

def shutdown_cleanly
  File.unlink $opened_server_socket if $opened_server_socket
  Marinda.release_exclusive_lock $lock_handle if $lock_handle
end

Signal.trap("TERM") do
  $log.info "got SIGTERM; exiting at next opportunity"
  $shutdown_requested = true
end

Signal.trap("INT")  do
  $log.info "got SIGINT; exiting at next opportunity"
  $shutdown_requested = true
end

Signal.trap("HUP") do
  $log.info "got SIGHUP; will reload config at next opportunity"
  $reload_config = true
end

def log_failure(msg)  # use 'marinda-ls' regardless of $0 for security
  path = $options.root_dir + "/marinda-ls-failed.#{Time.now.to_i}.#{$$}"
  File.open(path, "w") do |file|
    file.puts msg
  end
end


#===========================================================================
# MAIN
#===========================================================================

if $options.use_lock_file
  $lock_handle = Marinda.obtain_exclusive_lock $options.lock_file
  unless $lock_handle
    abort "ERROR: couldn't obtain lock on '#{$options.lock_file}'"
  end
end

begin
  config = Marinda::LocalConfig.new $options.config_path
  config.export_debugging_flags()
  $log.debug "%p", config if $options.verbose

rescue # Marinda::ConfigBase::MalformedConfigException & YAML exceptions
  msg = $!.class.name + ": " + $!.to_s
  $log.err "ERROR: couldn't load config from '%s': %s",
    $options.config_path, msg
  exit 1
end

# Perform require now to fail fast if this dependency doesn't exist.
# This is usually better than failing part way through start up.
# Also, only recognize the use_judy option at start up so that
# a missing dependency won't cause a failure later.
if config.use_judy
  $use_judy = true
end

# We intentionally set up the connection just once, at initial start up.
# We never reset the connection on subsequent requests to re-read the config,
# since an error in the connection config could screw things up.  If the
# user really wants to change the connection settings, then he can simply
# restart the local server.
server_sock = UNIXServer.open config.socket
if config.socket_access
  $log.info "chmod %3o %s", config.socket_access, config.socket
  File.chmod config.socket_access, config.socket
end

if config.use_ssl
  Marinda::ClientSSLConnection.set_ssl_context config.cert, config.key,
    config.ca_file, config.ca_path, config.check_server_name
end

# Detach after creating the server socket to make it easier for the
# user to detect a connection setup problem.
if $options.detach
  $stderr.puts "starting #{$0} in background\n"
  Marinda::daemonize()
  $log.info "started %s in background", $0
end

exit_status = 0

begin
  $log.info "waiting for clients on %s", config.socket
  eva_loop = Eva::Loop.default
  mux = (config.localspace_only ? nil :
         Marinda::GlobalSpaceMux.new(config.node_id))
  space = Marinda::LocalSpace.new eva_loop, config.node_id, config.node_name,mux
  ls_loop = Marinda::LocalSpaceEventLoop.new eva_loop, config, server_sock,
    space, mux
  eva_loop.delegate = ls_loop
  eva_loop.run()  # only returns on exit request triggered by a signal

  File.delete config.socket

rescue
  short_msg = $!.class.name + ": " + $!.to_s
  msg = sprintf "%s: exiting on uncaught exception " +
    "at top-level: %p; backtrace: %s", $0, $!, $!.backtrace.join(" <= ")
  $log.err "%s", msg
  log_failure msg rescue nil
  exit_status = 1

ensure
  if $options.use_lock_file
    Marinda.release_exclusive_lock $lock_handle rescue nil
  end
end

exit exit_status
