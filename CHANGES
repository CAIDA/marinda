version 0.15.6, 2014-07-16
  * fixed Ruby 2.1.2 incompatibility with RFLOAT_VALUE

version 0.15.5, 2014-04-15
  * implemented temporary workaround for bug in Region#restore_templates

version 0.15.4, 2013-08-30
  * fixed missing embedded code samples in docs/client-programming.html and
    docs/advanced-programming.html

version 0.15.3, 2013-08-14
  * added support for repeating timers to Marinda::ClientEventLoop
    (#set_deadline is now deprecated; use #set_timer)

version 0.15.2, 2013-06-09
  * fixed various problems and regressions in the global server

version 0.15.1, 2013-05-23
  * fixed a Ruby 1.8.7 incompatibility at globalts.rb, line 1097

version 0.15.0, 2013-05-13
  * switched to storing MIO-encoded tuples/templates as C strings
    directly in Judy arrays; this should fix the occasional segfaults
    caused by a poor interaction between the Ruby garbage collector and
    Judy arrays
  * changed global/local servers to always use Judy arrays
  * made changes to the internal API of the new Judy array wrapper
  * fixed memory leak in Judy array wrapper
  * migrated checkpoint tools from sqlite3-ruby to amalgalite

version 0.14.0, 2013-03-31
  * directly incorporated Ruby Judy wrapper (formerly used rjudy gem)
  * Marinda::Client.new now takes a socket name and an optional specification
    for the port to open
  * removed the following methods on Marinda::Client: reply,
    remember_peer, forget_peer, write_to, forward_to, take_priv,
    takep_priv, take_priv_async, takep_priv_async, create_new_binding,
    duplicate_channel, create_global_commons_channel, open_port
  * removed support for passing open file descriptors between clients
  * removed private regions
  * made other numerous internal changes to greatly simplify the code

version 0.13.7, 2013-05-02
  * added ClientEventLoop#set_deadline, a low-level mechanism for timing
    out the underlying select() call of the event loop provided by
    ClientEventLoop; this is useful for implementing a timer

version 0.13.6, 2012-06-22
  * fixed bug in 'consume' operation ('consume_stream' not affected):
    a race condition could cause tuples to be lost

version 0.13.5, 2012-03-07
  * changed Gem spec to automatically install some of the included scripts
    to Ruby's bin directory (e.g., marinda-gs, marinda-ls)

version 0.13.4, 2011-12-13
  * implemented a workaround for tricky nonblocking I/O behavior of SSL
    that could cause the local server to lose its connection to the global
    server when performing a large amount of writes
  * fixed bug that could trigger an unhandled exception in the local server
    if a client disconnected before receiving a handle to a newly created
    channel

version 0.13.3, 2010-07-12
  * updated 'Installation Guide' and 'Client Programming Guide'
  * added 'Advanced Client Programming Guide' and runnable example scripts

version 0.13.2, 2010-05-07
  * fixed bug: GlobalSpace#enq_message can try to access
    context.sock.__connection when the connection no longer exists

version 0.13.1, 2010-03-24
  * fixed bug: local server didn't properly handle the case of
    connect_nonblock() not blocking

version 0.13.0, 2010-03-23
  * replaced main event-loop processing in both the local and global servers
    with Eva, a new event-based programming library based on libev;
    in particular, the performance of both servers no longer degrades as
    the number of clients/connections increases, and both servers are faster
  * increased protocol version to 3:
    - using Mio (should have changed protocol version in v0.12.0)
    - more information is now passed back to Marinda::Client (client_id,
      run_id, node_id, node_name)
    - the global server now responds to heartbeats, allowing the local
      server to deduce connection status

version 0.12.0, 2010-01-08
  * implemented Mio, a new high-speed serialization method that replaces
    YAML for all serialization needs in Marinda (except in config files)
  * reduced the number of times tuples/templates are serialized/de-serialized
    as they travel from the client to the local server to the global server
    and then back again

version 0.11.0, 2009-12-15
  * new asynchronous client operations: read_async, readp_async, take_async,
      takep_async, take_priv_async, takep_priv_async, read_all_async,
      take_all_async, monitor_async, consume_async, monitor_stream_async,
      consume_stream_async
  * added ClientEventLoop class which provides a select-based nonblocking
    event loop (rb-mperio v0.1.0 also provides a compatible event loop)
  * marinda-ls: now supports Linux's connect_nonblock behavior (which
    differs from FreeBSD)

version 0.10.0, 2009-12-07
  * marinda-ls: now single-threaded and uses nonblocking I/O (including
    for SSL)
    - this fixes a race condition in the old multi-threaded version that
      could cause tuples to be lost
  * both marinda-ls and marinda-gs will work on Ruby versions older than
    Ruby 1.9.2 preview 2 if the user has installed Tony Arcieri's
    openssl-nonblock gem (currently, v0.2.0 with my patches to make it
    more compatible with Ruby 1.9.2 preview 2)
  * marinda-ls: can now disable server name check in SSL cert validation
    with check_server_name config item
  * marinda-ls: now deletes the server Unix socket on clean exit
  * marinda-gs and marinda-ls: improved descriptiveness of syslog messages
  * improved efficiency of communication between marinda-ls and marinda-gs
  * improved reporting of errors while loading config files
  * marinda-ls: added socket_access config option to set the Unix
    permissions of the server socket
  * marinda-ls: renamed config options:
    - demux_addr to global_server_addr
    - demux_port to global_server_port
  * added --process-name for setting the process name

version 0.9.1, 2009-12-01
  * marinda-ls: fixed Ruby 1.9.x incompatibility that could cause a crash
  * marinda-gs: changed to not use SSL for a local server on 127.0.0.1
  * added support for RJudy (Ruby binding to Judy arrays), which significantly
    speeds up tuple space operations
  * added benchmarking script
  * marinda-gs: fixed to load new config on SIGHUP
  * added migrate-checkpoints to deal with incompatible checkpoints between
    Ruby 1.8.x and 1.9.x

version 0.9.0, 2009-11-19
  * global server is now single threaded and uses nonblocking I/O (including
    for SSL)
    - global server now only works with Ruby 1.9.2 preview 2 or later
    - local server will still work with earlier Ruby versions
  * new operations: take_all, consume, monitor_stream, consume_stream
  * new automated tests of basic, iteration, and stream operations
  * now uses configured server host name for validation of certs
  * disabled Nagle
  * BasicSocket.do_not_reverse_lookup is now true
  * marinda-gs removes the lock file after checkpoint-and-exit
  * fixed Ruby 1.9.2 preview 2 incompatibility
  * fixed Ruby 1.9.x incompatibility (e.g., string handling and syntax)
  * switched from sqlite3-ruby to Amalgalite (only affects global server)

version 0.8.0, 2009-03-16
  * added documentation: Installation and Client Programming Guides
    (the latter isn't complete)
  * marinda-gs & marinda-ls: added more validation of config values,
    implemented use of lock files, improved error reporting, and made
    other general improvements
  * added license text to source files in preparation for public release

version 0.7.3, 2009-02-27
  * marinda-gs: fixed to catch Errno::EINVAL when accepting connections from
    clients

version 0.7.2, 2009-02-02
  * marinda-gs & marinda-ls: fixed to catch OpenSSL::SSL::SSLError exception

version 0.7.1, 2008-10-15
  * marinda-ls: changed to unlink the server socket file on SIGTERM and SIGINT
  * marinda-ls: implemented daemonizing with -d option
  * marinda-ls: improved catching and reporting of exceptions
  * added logging to files of uncaught exceptions that reach the top execution
    level of threads
  * fixed some debugging messages

version 0.7.0, 2008-08-01
  * implemented checkpointing and restore in global tuple space
  * changed mux-demux protocol (now v2) to exchange node ID and session ID;
    this allows both the local and global servers to properly handle failure
    of either end
  * implemented real scripts for starting up the local and global servers,
    with much better checking of config files
  * made numerous other improvements: cleaned up code, changed to use syslog,
    fixed bugs, etc.

version 0.6.4, 2008-03-11
  * changed TemplateBag to provide newly written tuples to all suitable
    blocked *read* requests before providing tuples to blocked take requests;
    previously, take requests took precedence, and it was impossible to write
    a program that monitored all tuples (for logging purposes, for example)

version 0.6.3, 2007-09-12
....
