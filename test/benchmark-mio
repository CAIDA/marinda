#!/usr/bin/env ruby

#############################################################################
## Tests message encoding/decoding with MIO.
##
#############################################################################

$: << "."
$: << "../lib"
$: << "../ext"

require 'yaml'
require 'ostruct'
require 'optparse'
require 'benchmark'

require 'mioext'

$0 = "benchmark-mio"
$command_line = "#{$0} " + ARGV.join(" ")

$options = OpenStruct.new
$options.yaml = true
$options.bert = false
$options.convert = true
$options.encode = true
$options.decode = true
$options.scale = 1

opts = OptionParser.new

opts.on("--[no-]convert", TrueClass,  "benchmark converting") do |v|
  $options.convert = v
end

opts.on("--[no-]encode", TrueClass,  "benchmark encoding") do |v|
  $options.encode = v
end

opts.on("--[no-]decode", TrueClass,  "benchmark decoding") do |v|
  $options.decode = v
end

opts.on("--[no-]yaml", TrueClass,  "benchmark YAML") do |v|
  $options.yaml = v
end

opts.on("--[no-]bert", TrueClass,  "benchmark BERT") do |v|
  $options.bert = v
end

opts.on("--scale", "=NUM", Integer,
        "increase interations by this factor") do |v|
  $options.scale = v
end

begin
  ARGV.replace opts.parse(*ARGV)
rescue OptionParser::ParseError
  $stderr.puts "ERROR: " + $!.to_s
  $stderr.puts opts
  exit 1
end

if $options.bert
  require 'rubygems'
  require 'bert'
end

#----------------------------------------------------------------------------

def ratio(b1, tms1, b2, tms2)
  if tms1.real < 0 || tms2.real < 0
    printf "skipping due to negative real time: %s=%f, %s=%f\n",
      b1, tms1.real, b2, tms2.real
    return
  end

  if tms2.real <= tms1.real
    r = tms1.real / tms2.real
    printf "%s is %.3fx faster than %s\n", b2, r, b1
  else
    ratio b2, tms2, b1, tms1
  end
end


def size_ratio(b1, size1, b2, size2)
  if size1 >= size2
    r = size1.quo(size2)
    printf "%s is %.3fx larger than %s\n", b1, r, b2
  else
    size_ratio b2, size2, b1, size1
  end
end


def gen_string(len)
  a = []
  len.times do
    a << (rand(94) + 33).chr
  end
  a.join nil
end


#----------------------------------------------------------------------------

def bm_int_conversions(m, n, value, descr)
  n *= $options.scale
  puts "\n::: converting #{descr} (#{n} times) :::"

  puts
  Benchmark.bm(7) do |bm|
    btms = bm.report("b64") do
      m.benchmark_b64_encoding value, n
    end

    stms = bm.report("sprintf") do
      m.benchmark_decimal_int_encoding value, n
    end

    puts
    ratio "sprintf", stms, "b64", btms

    puts
    printf "b64:     %.5f us per conversion; %.0f/sec\n",
      (1.0e6 * btms.real).quo(n), n.quo(btms.real).round
    printf "sprintf: %.5f us per conversion; %.0f/sec\n",
      (1.0e6 * stms.real).quo(n), n.quo(stms.real).round
  end
end


def bm_double_conversions(m, n, value, descr)
  n *= $options.scale
  puts "\n::: converting #{descr} (#{n} times) :::"

  puts
  Benchmark.bm(7) do |bm|
    btms = bm.report("base64") do
      m.benchmark_base64_double_encoding value, n
    end

    stms = bm.report("sprintf") do
      m.benchmark_decimal_double_encoding value, n
    end

    puts
    ratio "sprintf", stms, "base64", btms

    puts
    printf "base64:  %.5f us per conversion; %.0f/sec\n",
      (1.0e6 * btms.real).quo(n), n.quo(btms.real).round
    printf "sprintf: %.5f us per conversion; %.0f/sec\n",
      (1.0e6 * stms.real).quo(n), n.quo(stms.real).round
  end
end


#----------------------------------------------------------------------------

def bm_noop_class_vs_instance(n)
  n *= $options.scale
  puts "\n::: noop #{n} iterations :::"

  m = MIO.new

  puts
  times = Benchmark.bmbm do |bm|
    bm.report("MIO class (noop)") do
      n.times do MIO.noop 0 end
    end

    bm.report("MIO instance (noop)") do
      n.times do m.noop 0 end
    end
  end

  ctms = times.shift
  itms = times.shift

  puts
  ratio "class", ctms, "instance", itms
  printf "class:     %.5f us per call\n", (1.0e6 * ctms.real).quo(n)
  printf "instance:  %.5f us per call\n", (1.0e6 * itms.real).quo(n)
end


#----------------------------------------------------------------------------

def bm_encode(n, tuple, descr)
  n *= $options.scale
  puts "\n::: encoding #{n} tuples (#{descr}) :::"

  ylen = YAML.dump(tuple).length if $options.yaml
  mlen = MIO.encode(tuple).length
  blen = BERT.encode(tuple).length if $options.bert

  puts
  times = Benchmark.bmbm do |bm|
    if $options.yaml
      bm.report("YAML") do
        n.times do YAML.dump tuple end
      end

      bm.report("YAML-noop") do
        n.times do MIO.encode_noop ylen end
      end
    end

    bm.report("MIO") do
      n.times do MIO.encode tuple end
    end

    bm.report("MIO-noop") do
      n.times do MIO.encode_noop mlen end
    end

    if $options.bert
      bm.report("BERT") do
        n.times do BERT.encode tuple end
      end

      bm.report("BERT-noop") do
        n.times do MIO.encode_noop blen end
      end
    end
  end

  if $options.yaml
    ytms = times.shift
    nytms = times.shift
  end

  mtms = times.shift
  nmtms = times.shift

  if $options.bert
    btms = times.shift
    nbtms = times.shift
  end

  if $options.yaml || $options.bert
    puts
    ratio "YAML", ytms, "MIO", mtms if $options.yaml
    ratio "BERT", btms, "MIO", mtms if $options.bert
    ratio "YAML proper", ytms - nytms,
      "MIO proper", mtms - nmtms if $options.yaml
    ratio "BERT proper", btms - nbtms,
      "MIO proper", mtms - nmtms if $options.bert
  end

  puts
  printf "YAML:  %.3f us per conversion; %.0f/sec\n",
    (1.0e6 * ytms.real).quo(n), n.quo(ytms.real).round if $options.yaml
  printf "MIO :  %.3f us per conversion; %.0f/sec\n",
    (1.0e6 * mtms.real).quo(n), n.quo(mtms.real).round
  printf "BERT:  %.3f us per conversion; %.0f/sec\n",
    (1.0e6 * btms.real).quo(n), n.quo(btms.real).round if $options.bert

  puts
  printf "YAML %d bytes\n", ylen if $options.yaml
  printf "MIO  %d bytes\n", mlen
  printf "BERT %d bytes\n", blen if $options.bert

  size_ratio "YAML", ylen, "MIO", mlen if $options.yaml
  size_ratio "BERT", blen, "MIO", mlen if $options.bert
end


#----------------------------------------------------------------------------

def bm_decode(n, tuple, descr)
  n *= $options.scale
  puts "\n::: decoding #{n} tuples (#{descr}) :::"

  if $options.yaml
    yen = YAML.dump(tuple)
    ylen = yen.length
  end

  men = MIO.encode(tuple)
  mlen = men.length

  if $options.bert
    ben = BERT.encode(tuple)
    blen = ben.length
  end

  puts
  times = Benchmark.bmbm do |bm|
    if $options.yaml
      bm.report("YAML") do
        n.times do YAML.load yen end
      end
    end

    bm.report("MIO") do
      n.times do MIO.decode men end
    end

    if $options.bert
      bm.report("BERT") do
        n.times do BERT.decode ben end
      end
    end
  end

  ytms = times.shift if $options.yaml
  mtms = times.shift
  btms = times.shift if $options.bert
    
  if $options.yaml || $options.bert
    puts
    ratio "YAML", ytms, "MIO", mtms if $options.yaml
    ratio "BERT", btms, "MIO", mtms if $options.bert
  end

  puts
  printf "YAML:  %.3f us per conversion; %.0f/sec\n",
    (1.0e6 * ytms.real).quo(n), n.quo(ytms.real).round if $options.yaml
  printf "MIO :  %.3f us per conversion; %.0f/sec\n",
    (1.0e6 * mtms.real).quo(n), n.quo(mtms.real).round
  printf "BERT:  %.3f us per conversion; %.0f/sec\n",
    (1.0e6 * btms.real).quo(n), n.quo(btms.real).round if $options.bert

  puts
  printf "YAML %d bytes\n", ylen if $options.yaml
  printf "MIO  %d bytes\n", mlen
  printf "BERT %d bytes\n", blen if $options.bert

  size_ratio "YAML", ylen, "MIO", mlen if $options.yaml
  size_ratio "BERT", blen, "MIO", mlen if $options.bert
end


#----------------------------------------------------------------------------

def bm_coding(n, tuple, descr)
  bm_encode n, tuple, descr if $options.encode
  bm_decode n, tuple, descr if $options.decode
end


#############################################################################
## MAIN
#############################################################################

puts "# " + $command_line
puts "# " + Time.now.to_s

m = MIO.new

if $options.convert
  bm_double_conversions m, 1_000_000, 1.0, "1.0"
  bm_double_conversions m, 1_000_000, 1.23456, "1.23456"
  bm_double_conversions m, 1_000_000, 1.234567890123456, "1.234567890123456"
  bm_double_conversions m, 1_000_000, 123456.0, "123456.0"
  bm_double_conversions m, 1_000_000, 12345678.90123456, "12345678.90123456"

  bm_int_conversions m, 1_000_000, 1, "1"
  bm_int_conversions m, 1_000_000, 2**16, "2**16"
  bm_int_conversions m, 1_000_000, 2**24, "2**24"
  bm_int_conversions m, 1_000_000, 2**30-1, "max 32-bit fixnum"
  bm_int_conversions m, 1_000_000, -2**30, "min 32-bit fixnum"
  bm_int_conversions m, 1_000_000, 2**30, "first bignum or 64-bit fixnum"
  bm_int_conversions m, 1_000_000, 2**63-1, "max 64-bit bignum or fixnum"
  bm_int_conversions m, 1_000_000, -2**63, "min 64-bit bignum or fixnum"
end

bm_noop_class_vs_instance 500000

bm_coding 50000, [], "empty"

bm_coding 25000, [1,2,3,4,5], "5 small fixnums"

bm_coding 25000, [2**30-1,2**30-2,2**30-3,2**30-4,2**30-5], "5 large fixnums"

bm_coding 25000, [1.1234567891,2.1234567891,3.1234567891,4.1234567891,5.1234567891], "5 floats"

bm_coding 10000, (1..25).to_a, "25 small fixnums"

bm_coding 10000, (1..25).to_a.map{|n| 2**30-n}, "25 large fixnums"

bm_coding 10000, [1.1234567891,2.1234567891,3.1234567891,4.1234567891,5.1234567891] * 5, "25 floats"

bm_coding 200, (1..1000).to_a, "1000 small fixnums"

bm_coding 200, (1..1000).to_a.map{|n| 2**30-n}, "1000 large fixnums"

s = gen_string 26
bm_coding 50000, [s], "1 string of 26 bytes"

s = gen_string 1024
bm_coding 50000, [s], "1 string of 1024 bytes"

s = gen_string 20000
bm_coding 5000, [s], "1 string of 20000 bytes"

a = []
10.times do a << gen_string(26) end
bm_coding 10000, a, "10 strings of 26 bytes each"

90.times do a << gen_string(26) end
bm_coding 1000, a, "100 strings of 26 bytes each"

900.times do a << gen_string(26) end
bm_coding 100, a, "1000 strings of 26 bytes each"

tuples = [
          [["foo", "bar"], ""],
          [["foo", "bar"], ["", ""]],
          [[nil, 2, nil], [3], nil, [nil]],
          [[nil, 2**30-2, nil], [2**30-3], nil, [nil]],
          [[[]]],
          [[[nil]]],
          [[[42]]],
          [[[1, 2, 3]]],
          [[[1, "foo", "bar"]]],
          [[[], [], []]],
          [[[1], 2, 3]],
          [1, ["foo", [2, 3, "bar"]]],
          [[["foo", "bar"], [2, 3]], ["", ""]],
          [[[[[1, "foo", "bar"]]]]],
          [[], [[]], [[[]]], [[[[]]]]],
          [[1, 2, 3], [[4]], [[[5, 6]]], [[[["foo"]]]]],
          [[2**30-1, 2**30-2, 2**30-3], [[2**30-4]], [[[2**30-5, 2**30-6]]], [[[["foo"]]]]]
]
tuples.each do |t|
  bm_coding 15000, t, t.inspect
end

puts "\n\n### DONE."
