#!/usr/bin/env ruby

#############################################################################
## Tests the asynchronous iteration operations read_all_async, take_all_async,
## monitor_async, and consume_async.
##
## Unlike test_basic-ops, you don't have to start up marinda-gs and marinda-ls
## with empty regions to run this test script because this script clears
## out regions prior to use.
##
#############################################################################

$: << "."
$: << "../lib"
$: << "../ext"

require 'thread'
require 'socket'
require 'ostruct'
require 'optparse'

require 'marinda'
require 'marinda/verboseclient'

Thread.abort_on_exception = true

$options = OpenStruct.new
$options.port = 7000

opts = OptionParser.new

opts.on("--port", "=NUM", Integer,
        "region port to use (#{$options.port})") do |v|
  $options.port = v
end

opts.on("--[no-]mperio", TrueClass,  "use rb-mperio for the event loop") do |v|
  $options.mperio = v
end

opts.on("-v", "--[no-]verbose", TrueClass,  "show detailed progress") do |v|
  $options.verbose = v
end

begin
  ARGV.replace opts.parse(*ARGV)
rescue OptionParser::ParseError
  $stderr.puts "ERROR: " + $!.to_s
  $stderr.puts opts
  exit 1
end

#===========================================================================

if $options.mperio
  $: << "#{ENV['HOME']}/Work/mper/rb-mperio/ext"
  $: << "#{ENV['HOME']}/Work/mper/rb-mperio/lib"

  $options.mper_port = 1
  $options.log_path = nil  # disable logging by default

  require 'mperio'

  class Delegate

    def initialize(mperio)
      @mperio = mperio
      @mperio.delegate = self
    end


    def mperio_on_more
      puts "more" if $options.verbose
    end


    def mperio_on_data(result)
      printf "mperio_on_data: %p\n", result if $options.verbose
    end


    def mperio_on_error(reqnum, message)
      $stderr.printf "mperio_on_error: reqnum=%d msg=%s\n", reqnum, message
      @mperio.stop
      exit 1
    end


    def mperio_on_send_error(reqnum, message)
      $stderr.printf "mperio_on_send_error: reqnum=%d msg=%s\n", reqnum, message
    end


    def mperio_service_failure(message)
      $stderr.printf "mperio_service_failure: %s\n", message
      @mperio.stop
      exit 1
    end

  end

  $mperio = MperIO.new $options.mper_port, $options.log_path
  $mperio.suspend_on_idle = true
  delegate = Delegate.new $mperio

  $loop = $mperio
else
  $loop = Marinda::ClientEventLoop.new
end


#===========================================================================

Thread.abort_on_exception = true

sock_path = "/tmp/localts-test.sock"
$c1 = Marinda::Client.new sock_path, :port => $options.port, :scope => :local
$c2 = Marinda::Client.new sock_path, :port => $options.port, :scope => :local
$g1 = Marinda::Client.new sock_path, :port => $options.port
$g2 = Marinda::Client.new sock_path, :port => $options.port

$c1 = Marinda::VerboseClient.new $c1, "c1"
$c2 = Marinda::VerboseClient.new $c2, "c2"
$g1 = Marinda::VerboseClient.new $g1, "g1"
$g2 = Marinda::VerboseClient.new $g2, "g2"

$loop.add_source $c1
#$loop.add_source $c2
$loop.add_source $g1
#$loop.add_source $g2

if $options.verbose
  Marinda::Client.debug = true
  Marinda::ClientEventLoop.debug = true
end


def assert_equal(x, y)
  unless x == y
    printf "FAILED: %p doesn't equal %p\n", x, y
    exit 1
  else
    printf "ok %p\n", y
  end
end


def check_remainder(ts, remainder)
  result = []
  ts.read_all [] do |tuple|
    result << tuple
  end

  assert_equal(result, remainder)
end


def clear(ts)
  while ts.takep []; end
end


#----------------------------------------------------------------------------

ALL_TUPLES = [[1,10,20,30], [2,40,50,60], [2,41,50,60], [1,11,20,30],
              [3,70,80,90], [2,42,50,60], [1,12,20,30], [1,13,20,30],
              [1,14,20,30]]

def populate(ts)
  ALL_TUPLES.each do |tuple|
    ts.write tuple
  end
end


#----------------------------------------------------------------------------
def test_read_all_async(descr, ts, template, expected)
  puts "\n::: testing read_all_async #{template.inspect} in #{descr} :::"

  result = []
  ts.read_all_async template do |tuple|
    result << tuple
  end

  $loop.start()
  assert_equal(result, expected)
end


def test_every_read_all_async(descr, ts)
  clear ts
  populate ts

  test_read_all_async descr, ts, [], ALL_TUPLES

  test_read_all_async descr, ts, [1, nil, nil, nil],
    [[1,10,20,30], [1,11,20,30], [1,12,20,30], [1,13,20,30], [1,14,20,30]]

  test_read_all_async descr, ts, [2, nil, nil, nil],
    [[2,40,50,60], [2,41,50,60], [2,42,50,60]]

  test_read_all_async descr, ts, [3, nil, nil, nil], [[3,70,80,90]]

  test_read_all_async descr, ts, [4, nil, nil, nil], []
end


#----------------------------------------------------------------------------
def test_take_all_async(descr, ts, template, expected, remainder)
  puts "\n::: testing take_all_async #{template.inspect} in #{descr} :::"

  clear ts
  populate ts

  result = []
  ts.take_all_async template do |tuple|
    result << tuple
  end

  $loop.start()
  assert_equal(result, expected)
  check_remainder ts, remainder
end


def test_every_take_all_async(descr, ts)
  test_take_all_async descr, ts, [], ALL_TUPLES, []

  test_take_all_async descr, ts, [1, nil, nil, nil],
    [[1,10,20,30], [1,11,20,30], [1,12,20,30], [1,13,20,30], [1,14,20,30]],
    [[2,40,50,60], [2,41,50,60], [3,70,80,90], [2,42,50,60]] 

  test_take_all_async descr, ts, [2, nil, nil, nil],
    [[2,40,50,60], [2,41,50,60], [2,42,50,60]],
    [[1,10,20,30], [1,11,20,30], [3,70,80,90], [1,12,20,30], [1,13,20,30],
     [1,14,20,30]]

  test_take_all_async descr, ts, [3, nil, nil, nil], [[3,70,80,90]],
    [[1,10,20,30], [2,40,50,60], [2,41,50,60], [1,11,20,30],
     [2,42,50,60], [1,12,20,30], [1,13,20,30], [1,14,20,30]]

  test_take_all_async descr, ts, [4, nil, nil, nil], [], ALL_TUPLES
end


#----------------------------------------------------------------------------
def test_monitor_async(descr, ts, ts2, template, preload, last_tuple, expected)
  puts "\n::: testing monitor_async #{template.inspect} in #{descr} :::"

  clear ts
  q = Queue.new

  Thread.new do
    ALL_TUPLES.each_with_index do |tuple, i|
      q << :start if i == preload
      sleep 0.3 if i >= preload
      ts2.write tuple
    end
    q << :start if preload == ALL_TUPLES.length
    q << :done
  end

  q.deq  # wait for :start
  result = []
  ts.monitor_async template do |tuple|
    puts "monitor >> " + tuple.inspect
    result << tuple
    ts.cancel() if tuple == last_tuple
  end

  $loop.start()
  q.deq  # wait for :done
  assert_equal(result, expected)
end


def test_every_monitor_async(descr, ts, ts2)
  test_monitor_async descr, ts, ts2, [], 1, [1,14,20,30], ALL_TUPLES

  test_monitor_async descr, ts, ts2, [1, nil, nil, nil], 1, [1,14,20,30],
    [[1,10,20,30], [1,11,20,30], [1,12,20,30], [1,13,20,30], [1,14,20,30]]

  test_monitor_async descr, ts, ts2, [2, nil, nil, nil], 0, [2,42,50,60],
    [[2,40,50,60], [2,41,50,60], [2,42,50,60]]

  test_monitor_async descr, ts, ts2, [3, nil, nil, nil], 5, [3,70,80,90],
    [[3,70,80,90]]
end


#----------------------------------------------------------------------------
def test_consume_async(descr, ts, ts2, template, preload, last_tuple,
                       expected, remainder)
  puts "\n::: testing consume_async #{template.inspect} in #{descr} :::"

  clear ts
  q = Queue.new

  Thread.new do
    ALL_TUPLES.each_with_index do |tuple, i|
      q << :start if i == preload
      sleep 0.3 if i >= preload
      ts2.write tuple
    end
    q << :start if preload == ALL_TUPLES.length
    q << :done
  end

  q.deq  # wait for :start
  result = []
  ts.consume_async template do |tuple|
    puts "consume >> " + tuple.inspect
    result << tuple
    ts.cancel() if tuple == last_tuple
  end

  $loop.start()
  q.deq  # wait for :done
  assert_equal(result, expected)
  check_remainder ts, remainder
end


def test_every_consume_async(descr, ts, ts2)
  test_consume_async descr, ts, ts2, [], 1, [1,14,20,30], ALL_TUPLES, []

  test_consume_async descr, ts, ts2, [1, nil, nil, nil], 1, [1,14,20,30],
    [[1,10,20,30], [1,11,20,30], [1,12,20,30], [1,13,20,30], [1,14,20,30]],
    [[2,40,50,60], [2,41,50,60], [3,70,80,90], [2,42,50,60]]

  test_consume_async descr, ts, ts2, [2, nil, nil, nil], 0, [2,42,50,60],
    [[2,40,50,60], [2,41,50,60], [2,42,50,60]],
    [[1,10,20,30], [1,11,20,30], [3,70,80,90], [1,12,20,30], [1,13,20,30],
     [1,14,20,30]]

  test_consume_async descr, ts, ts2, [3, nil, nil, nil], 5, [3,70,80,90],
    [[3,70,80,90]],
    [[1,10,20,30], [2,40,50,60], [2,41,50,60], [1,11,20,30],
     [2,42,50,60], [1,12,20,30], [1,13,20,30], [1,14,20,30]]
end


#----------------------------------------------------------------------------
def test_monitor_stream_async(descr, ts, ts2, template, preload, last_tuple,
                              expected)
  puts "\n::: testing monitor_stream_async #{template.inspect} in #{descr} :::"

  clear ts
  q = Queue.new

  Thread.new do
    ALL_TUPLES.each_with_index do |tuple, i|
      if i == preload
        q << :start
        sleep 2
      end
      ts2.write tuple
    end
    q << :start if preload == ALL_TUPLES.length
    q << :done
  end

  q.deq  # wait for :start
  result = []
  ts.monitor_stream_async template do |tuple|
    puts "monitor_stream >> " + tuple.inspect
    result << tuple
    ts.cancel() if tuple == last_tuple
    sleep 0.3
  end

  $loop.start()
  q.deq  # wait for :done
  assert_equal(result, expected)
end


def test_every_monitor_stream_async(descr, ts, ts2)
  test_monitor_stream_async descr, ts, ts2, [], 1, [1,14,20,30], ALL_TUPLES

  test_monitor_stream_async descr, ts, ts2, [1, nil, nil, nil], 1, [1,14,20,30],
    [[1,10,20,30], [1,11,20,30], [1,12,20,30], [1,13,20,30], [1,14,20,30]]

  test_monitor_stream_async descr, ts, ts2, [2, nil, nil, nil], 0, [2,42,50,60],
    [[2,40,50,60], [2,41,50,60], [2,42,50,60]]

  test_monitor_stream_async descr, ts, ts2, [3, nil, nil, nil], 5, [3,70,80,90],
    [[3,70,80,90]]
end


#----------------------------------------------------------------------------
def test_consume_stream_async(descr, ts, ts2, template, preload, last_tuple,
                              expected, remainder)
  puts "\n::: testing consume_stream_async #{template.inspect} in #{descr} :::"

  clear ts
  q = Queue.new

  Thread.new do
    ALL_TUPLES.each_with_index do |tuple, i|
      if i == preload
        q << :start
        sleep 2
      end
      ts2.write tuple
    end
    q << :start if preload == ALL_TUPLES.length
    q << :done
  end

  q.deq  # wait for :start
  result = []
  ts.consume_stream_async template do |tuple|
    puts "consume_stream >> " + tuple.inspect
    result << tuple
    ts.cancel() if tuple == last_tuple
    sleep 0.3
  end

  $loop.start()
  q.deq  # wait for :done
  assert_equal(result, expected)
  check_remainder ts, remainder
end


def test_every_consume_stream_async(descr, ts, ts2)
  test_consume_stream_async descr, ts, ts2, [], 1, [1,14,20,30], ALL_TUPLES, []

  test_consume_stream_async descr, ts, ts2, [1, nil, nil, nil], 4, [1,14,20,30],
    [[1,10,20,30], [1,11,20,30], [1,12,20,30], [1,13,20,30], [1,14,20,30]],
    [[2,40,50,60], [2,41,50,60], [3,70,80,90], [2,42,50,60]]

  test_consume_stream_async descr, ts, ts2, [2, nil, nil, nil], 0, [2,42,50,60],
    [[2,40,50,60], [2,41,50,60], [2,42,50,60]],
    [[1,10,20,30], [1,11,20,30], [3,70,80,90], [1,12,20,30], [1,13,20,30],
     [1,14,20,30]]

  test_consume_stream_async descr, ts, ts2, [3, nil, nil, nil], 3, [3,70,80,90],
    [[3,70,80,90]],
    [[1,10,20,30], [2,40,50,60], [2,41,50,60], [1,11,20,30],
     [2,42,50,60], [1,12,20,30], [1,13,20,30], [1,14,20,30]]
end


#############################################################################

puts "\n\n==[ local ]=======================================================\n"

test_every_read_all_async "local region", $c1

# The remaining tests may use read_all, so read_all should be correct by now.

test_every_take_all_async "local region", $c1
test_every_monitor_async "local region", $c1, $c2
test_every_consume_async "local region", $c1, $c2
test_every_monitor_stream_async "local region", $c1, $c2
test_every_consume_stream_async "local region", $c1, $c2

puts "\n\n==[ global ]======================================================\n"

test_every_take_all_async "global region", $g1
test_every_read_all_async "global region", $g1
test_every_monitor_async "global region", $g1, $g2
test_every_consume_async "global region", $g1, $g2
test_every_monitor_stream_async "global region", $g1, $g2
test_every_consume_stream_async "global region", $g1, $g2

puts "\n\n### SUCCESS."
