#!/usr/bin/env ruby

#############################################################################
## Tests JudyL wrapper.
##
## Run from top-level directory: $ ruby -I . test/test_judyl
##
#############################################################################

require 'ostruct'
require 'optparse'

require 'test/unit'
require 'ext/mioext'

$options = OpenStruct.new
opts = OptionParser.new

opts.on("--[no-]verbose", TrueClass, "enable verbosity") do |v|
  $options.verbose = v
end

begin
  ARGV.replace opts.parse(*ARGV)
rescue OptionParser::ParseError
  $stderr.puts "ERROR: " + $!.to_s
  $stderr.puts opts
  exit 1
end


#============================================================================

class TestJudy < Test::Unit::TestCase

  def test_empty
    j = Judy::JudyL.new

    assert_equal(2 ** Judy::WORD_SIZE, Judy::MAX_COUNT)
    assert_equal(nil, j[0])
    assert_equal(nil, j[1])
    assert_equal(0, j.count_present)
    assert_equal(0, j.size)
    assert_equal(0, j.length)
    assert_equal(nil, j.nth_value(1))
    assert_equal(nil, j.nth_index(1))
    assert_equal(0, j.mem_used)
    assert_equal(nil, j.first_index)
    assert_equal(nil, j.first_index(0))
    assert_equal(nil, j.next_index(0))
    assert_equal(nil, j.last_index)
    assert_equal(nil, j.prev_index(1))
    assert_equal(0, j.first_empty_index)
    assert_equal(1, j.first_empty_index(1))
    assert_equal(1, j.next_empty_index(0))
    assert_equal(2, j.next_empty_index(1))
    assert_equal(Judy::MAX_COUNT - 1, j.last_empty_index)
    assert_equal(0, j.prev_empty_index(1))
    assert_equal(nil, j.prev_empty_index(0))
    assert_equal(nil, j.first)
    assert_equal(nil, j.last)
    assert_equal(true, j.empty?) 
    assert_equal(false, j.include?("nosuch"))
    assert_equal(false, j.full?)
    assert_equal([], j.to_a)
    assert_equal("[]", j.to_s)
  end

  def test_singleton_index_0
    value = "testing"
    j = Judy::JudyL.new
    j[0] = value

    assert_equal(value, j[0])
    assert_equal(nil, j[1])
    assert_equal(1, j.count_present)
    assert_equal(1, j.size)
    assert_equal(1, j.length)
    assert_equal(value, j.nth_value(1))
    assert_equal(0, j.nth_index(1))
    assert_equal(0, j.first_index)
    assert_equal(0, j.first_index(0))
    assert_equal(nil, j.first_index(1))
    assert_equal(nil, j.next_index(0))
    assert_equal(nil, j.next_index(1))
    assert_equal(0, j.last_index)
    assert_equal(nil, j.prev_index(0))
    assert_equal(0, j.prev_index(1))
    assert_equal(1, j.first_empty_index)
    assert_equal(1, j.first_empty_index(0))
    assert_equal(1, j.first_empty_index(1))
    assert_equal(1, j.next_empty_index(0))
    assert_equal(2, j.next_empty_index(1))
    assert_equal(Judy::MAX_COUNT - 1, j.last_empty_index)
    assert_equal(nil, j.prev_empty_index(1))
    assert_equal(nil, j.prev_empty_index(0))
    assert_equal(value, j.first)
    assert_equal(value, j.last)
    assert_equal(false, j.empty?) 
    assert_equal(false, j.include?("nosuch"))
    assert_equal(true, j.include?(value))
    assert_equal(false, j.full?)
    assert_equal([value], j.to_a)
    assert_equal("[\"#{value}\"]", j.to_s)
  end

  def test_singleton_index_1
    value = "testing"
    j = Judy::JudyL.new
    j[1] = value

    assert_equal(nil, j[0])
    assert_equal(value, j[1])
    assert_equal(nil, j[2])
    assert_equal(1, j.count_present)
    assert_equal(2, j.size)
    assert_equal(2, j.length)
    assert_equal(value, j.nth_value(1))
    assert_equal(1, j.nth_index(1))
    assert_equal(1, j.first_index)
    assert_equal(1, j.first_index(0))
    assert_equal(1, j.first_index(1))
    assert_equal(nil, j.first_index(2))
    assert_equal(1, j.next_index(0))
    assert_equal(nil, j.next_index(1))
    assert_equal(nil, j.next_index(2))
    assert_equal(1, j.last_index)
    assert_equal(nil, j.prev_index(0))
    assert_equal(nil, j.prev_index(1))
    assert_equal(1, j.prev_index(2))
    assert_equal(0, j.first_empty_index)
    assert_equal(0, j.first_empty_index(0))
    assert_equal(2, j.first_empty_index(1))
    assert_equal(2, j.first_empty_index(2))
    assert_equal(2, j.next_empty_index(0))
    assert_equal(2, j.next_empty_index(1))
    assert_equal(3, j.next_empty_index(2))
    assert_equal(Judy::MAX_COUNT - 1, j.last_empty_index)
    assert_equal(0, j.prev_empty_index(2))
    assert_equal(0, j.prev_empty_index(1))
    assert_equal(nil, j.prev_empty_index(0))
    assert_equal(value, j.first)
    assert_equal(value, j.last)
    assert_equal(false, j.empty?) 
    assert_equal(false, j.include?("nosuch"))
    assert_equal(true, j.include?(value))
    assert_equal(false, j.full?)
    assert_equal([nil, value], j.to_a)
    assert_equal("[nil, \"#{value}\"]", j.to_s)
  end

  def test_multiple
    ary = []
    values = [[0, "alpha"], [5, "delta"], [1, "beta"], [3, "gamma"]]
    j = Judy::JudyL.new

    values.each do |index, value|
      ary[index] = value
      j[index] = value
    end
    assert_equal(ary, j.to_a)

    assert_equal(4, j.count_present)
    assert_equal(ary.size, j.size)
    assert_equal(ary.length, j.length)

    assert_equal("alpha", j.nth_value(1))
    assert_equal("beta", j.nth_value(2))
    assert_equal("gamma", j.nth_value(3))
    assert_equal("delta", j.nth_value(4))

    assert_equal(0, j.nth_index(1))
    assert_equal(1, j.nth_index(2))
    assert_equal(3, j.nth_index(3))
    assert_equal(5, j.nth_index(4))

    assert_equal(0, j.first_index)
    assert_equal(1, j.first_index(1))
    assert_equal(3, j.first_index(2))
    assert_equal(nil, j.first_index(6))

    assert_equal(1, j.next_index(0))
    assert_equal(3, j.next_index(1))
    assert_equal(nil, j.next_index(5))

    assert_equal(5, j.last_index)
    assert_equal(0, j.last_index(0))
    assert_equal(1, j.last_index(1))
    assert_equal(1, j.last_index(2))

    assert_equal(nil, j.prev_index(0))
    assert_equal(0, j.prev_index(1))
    assert_equal(1, j.prev_index(2))

    assert_equal(2, j.first_empty_index)
    assert_equal(2, j.first_empty_index(0))
    assert_equal(2, j.first_empty_index(1))
    assert_equal(2, j.first_empty_index(2))
    assert_equal(4, j.first_empty_index(3))
    assert_equal(6, j.first_empty_index(5))

    assert_equal(2, j.next_empty_index(0))
    assert_equal(2, j.next_empty_index(1))
    assert_equal(4, j.next_empty_index(2))
    assert_equal(4, j.next_empty_index(3))

    assert_equal(Judy::MAX_COUNT - 1, j.last_empty_index)
    assert_equal(nil, j.last_empty_index(0))
    assert_equal(nil, j.last_empty_index(1))
    assert_equal(2, j.last_empty_index(2))
    assert_equal(2, j.last_empty_index(3))
    assert_equal(4, j.last_empty_index(4))

    assert_equal(nil, j.prev_empty_index(0))
    assert_equal(nil, j.prev_empty_index(1))
    assert_equal(nil, j.prev_empty_index(2))
    assert_equal(2, j.prev_empty_index(3))

    assert_equal("alpha", j.first)
    assert_equal("delta", j.last)

    assert_equal(true, j.include?("alpha"))
    assert_equal(true, j.include?("beta"))
    assert_equal(true, j.include?("gamma"))
    assert_equal(true, j.include?("delta"))
    assert_equal(false, j.include?("nosuch"))
  end

  def test_iteration
    ary = []
    values = [[0, "alpha"], [5, "delta"], [1, "beta"], [3, "gamma"]]
    j = Judy::JudyL.new

    values.each do |index, value|
      ary[index] = value
      j[index] = value
    end

    jx = []
    j.each do |v|
      jx << v
    end
    assert_equal(ary.compact, jx)

    jx = []
    j.each_with_index do |v, i|
      jx << [i, v]
    end
    assert_equal(values.sort, jx)

    jx = []
    j.each_index do |i|
      jx << i
    end
    assert_equal(values.map {|i,v| i}.sort, jx)

    jx = []
    j.each_empty_index do |i|
      break if i >= j.length 
      jx << i
    end
    assert_equal([2, 4], jx)
  end

  def test_mutation
    ary = []
    values = [[0, "alpha"], [5, "delta"], [1, "beta"], [3, "gamma"]]
    j = Judy::JudyL.new

    values.each do |index, value|
      ary[index] = value
      j[index] = value
    end

    assert_equal(4, j.count_present)
    assert_equal(ary.size, j.size)
    assert_equal(ary.length, j.length)

    ary.delete_at 0  # => [beta, nil, gamma, nil, delta]
    j.delete_at 0
    assert_equal(ary, j.to_a)

    assert_equal("beta", j.nth_value(1))
    assert_equal("gamma", j.nth_value(2))
    assert_equal("delta", j.nth_value(3))

    assert_equal(0, j.nth_index(1))
    assert_equal(2, j.nth_index(2))
    assert_equal(4, j.nth_index(3))

    ary.delete_at 2  # => [beta, nil, nil, delta]
    j.delete_at 2
    assert_equal(ary, j.to_a)

    ary[1] = nil  # => no-op
    j.clear_at 1
    assert_equal(ary, j.to_a)

    assert_equal(2, j.count_present)
    assert_equal(ary.size, j.size)
    assert_equal(ary.length, j.length)

    ary[3] = nil  # => [beta, nil, nil, nil]
    j.clear_at 3  # => [beta]
    assert_equal(["beta"], j.to_a)

    assert_equal(1, j.count_present)
    assert_equal(1, j.size)
    assert_equal(1, j.length)

    ary[0] = nil  # => [nil, nil, nil, nil]
    j.clear_at 0  # => []
    assert_equal([], j.to_a)

    assert_equal(0, j.count_present)
    assert_equal(0, j.size)
    assert_equal(0, j.length)

    ary[3] = "delta"  # => [nil, nil, nil, delta]
    j[3] = "delta"
    assert_equal(ary, j.to_a)

    assert_equal(1, j.count_present)
    assert_equal(ary.size, j.size)
    assert_equal(ary.length, j.length)
  end

end
