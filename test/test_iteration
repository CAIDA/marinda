#!/usr/bin/env ruby

#############################################################################
## Tests the iteration operations read_all, take_all, monitor, and consume.
##
## Unlike test_basic-ops, you don't have to start up marinda-gs and marinda-ls
## with empty regions to run this test script because this script clears
## out regions prior to use.
##
#############################################################################

$: << "."
$: << "../lib"
$: << "../ext"

require 'thread'
require 'socket'
require 'ostruct'
require 'optparse'

require 'marinda'
require 'marinda/verboseclient'

Thread.abort_on_exception = true

$options = OpenStruct.new
$options.port = 7000

opts = OptionParser.new

opts.on("--port", "=NUM", Integer,
        "region port to use (#{$options.port})") do |v|
  $options.port = v
end

opts.on("-v", "--[no-]verbose", TrueClass,  "show detailed progress") do |v|
  $options.verbose = v
end

begin
  ARGV.replace opts.parse(*ARGV)
rescue OptionParser::ParseError
  $stderr.puts "ERROR: " + $!.to_s
  $stderr.puts opts
  exit 1
end

#===========================================================================

SOCKET = "/tmp/localts-test.sock"
s = UNIXSocket.open SOCKET
$c = Marinda::VerboseClient.new(Marinda::Client.new(s), "c")
$c.hello
$c1 = Marinda::VerboseClient.new($c.open_port($options.port), "c1")
$c2 = Marinda::VerboseClient.new($c.open_port($options.port), "c2")
$g1 = Marinda::VerboseClient.new($c.open_port($options.port, true), "g1")
$g2 = Marinda::VerboseClient.new($c.open_port($options.port, true), "g2")

def assert_equal(x, y)
  unless x == y
    printf "FAILED: %p doesn't equal %p\n", x, y
    exit 1
  else
    printf "ok %p\n", y
  end
end


def check_remainder(ts, remainder)
  result = []
  ts.read_all [] do |tuple|
    result << tuple
  end

  assert_equal(result, remainder)
end


def clear(ts)
  while ts.takep []; end
end


#----------------------------------------------------------------------------

ALL_TUPLES = [[1,10,20,30], [2,40,50,60], [2,41,50,60], [1,11,20,30],
              [3,70,80,90], [2,42,50,60], [1,12,20,30], [1,13,20,30],
              [1,14,20,30]]

def populate(ts)
  ALL_TUPLES.each do |tuple|
    ts.write tuple
  end
end


#----------------------------------------------------------------------------
def test_read_all(descr, ts, template, expected)
  puts "\n::: testing read_all #{template.inspect} in #{descr} :::"

  result = []
  ts.read_all template do |tuple|
    result << tuple
  end

  assert_equal(result, expected)
end


def test_every_read_all(descr, ts)
  clear ts
  populate ts

  test_read_all descr, ts, [], ALL_TUPLES

  test_read_all descr, ts, [1, nil, nil, nil],
    [[1,10,20,30], [1,11,20,30], [1,12,20,30], [1,13,20,30], [1,14,20,30]]

  test_read_all descr, ts, [2, nil, nil, nil],
    [[2,40,50,60], [2,41,50,60], [2,42,50,60]]

  test_read_all descr, ts, [3, nil, nil, nil], [[3,70,80,90]]

  test_read_all descr, ts, [4, nil, nil, nil], []
end


#----------------------------------------------------------------------------
def test_take_all(descr, ts, template, expected, remainder)
  puts "\n::: testing take_all #{template.inspect} in #{descr} :::"

  clear ts
  populate ts

  result = []
  ts.take_all template do |tuple|
    result << tuple
  end

  assert_equal(result, expected)
  check_remainder ts, remainder
end


def test_every_take_all(descr, ts)
  test_take_all descr, ts, [], ALL_TUPLES, []

  test_take_all descr, ts, [1, nil, nil, nil],
    [[1,10,20,30], [1,11,20,30], [1,12,20,30], [1,13,20,30], [1,14,20,30]],
    [[2,40,50,60], [2,41,50,60], [3,70,80,90], [2,42,50,60]] 

  test_take_all descr, ts, [2, nil, nil, nil],
    [[2,40,50,60], [2,41,50,60], [2,42,50,60]],
    [[1,10,20,30], [1,11,20,30], [3,70,80,90], [1,12,20,30], [1,13,20,30],
     [1,14,20,30]]

  test_take_all descr, ts, [3, nil, nil, nil], [[3,70,80,90]],
    [[1,10,20,30], [2,40,50,60], [2,41,50,60], [1,11,20,30],
     [2,42,50,60], [1,12,20,30], [1,13,20,30], [1,14,20,30]]

  test_take_all descr, ts, [4, nil, nil, nil], [], ALL_TUPLES
end


#----------------------------------------------------------------------------
def test_monitor(descr, ts, ts2, template, preload, last_tuple, expected)
  puts "\n::: testing monitor #{template.inspect} in #{descr} :::"

  clear ts
  q = Queue.new

  Thread.new do
    ALL_TUPLES.each_with_index do |tuple, i|
      q << :start if i == preload
      sleep 0.3 if i >= preload
      ts2.write tuple
    end
    q << :start if preload == ALL_TUPLES.length
    q << :done
  end

  q.deq  # wait for :start
  result = []
  ts.monitor template do |tuple|
    puts "monitor >> " + tuple.inspect
    result << tuple
    break if tuple == last_tuple
  end

  q.deq  # wait for :done
  assert_equal(result, expected)
end


def test_every_monitor(descr, ts, ts2)
  test_monitor descr, ts, ts2, [], 1, [1,14,20,30], ALL_TUPLES

  test_monitor descr, ts, ts2, [1, nil, nil, nil], 1, [1,14,20,30],
    [[1,10,20,30], [1,11,20,30], [1,12,20,30], [1,13,20,30], [1,14,20,30]]

  test_monitor descr, ts, ts2, [2, nil, nil, nil], 0, [2,42,50,60],
    [[2,40,50,60], [2,41,50,60], [2,42,50,60]]

  test_monitor descr, ts, ts2, [3, nil, nil, nil], 5, [3,70,80,90],
    [[3,70,80,90]]
end


#----------------------------------------------------------------------------
def test_consume(descr, ts, ts2, template, preload, last_tuple, expected,
                 remainder)
  puts "\n::: testing consume #{template.inspect} in #{descr} :::"

  clear ts
  q = Queue.new

  Thread.new do
    ALL_TUPLES.each_with_index do |tuple, i|
      q << :start if i == preload
      sleep 0.3 if i >= preload
      ts2.write tuple
    end
    q << :start if preload == ALL_TUPLES.length
    q << :done
  end

  q.deq  # wait for :start
  result = []
  ts.consume template do |tuple|
    puts "consume >> " + tuple.inspect
    result << tuple
    break if tuple == last_tuple
  end

  q.deq  # wait for :done
  assert_equal(result, expected)
  check_remainder ts, remainder
end


def test_every_consume(descr, ts, ts2)
  test_consume descr, ts, ts2, [], 1, [1,14,20,30], ALL_TUPLES, []

  test_consume descr, ts, ts2, [1, nil, nil, nil], 1, [1,14,20,30],
    [[1,10,20,30], [1,11,20,30], [1,12,20,30], [1,13,20,30], [1,14,20,30]],
    [[2,40,50,60], [2,41,50,60], [3,70,80,90], [2,42,50,60]]

  test_consume descr, ts, ts2, [2, nil, nil, nil], 0, [2,42,50,60],
    [[2,40,50,60], [2,41,50,60], [2,42,50,60]],
    [[1,10,20,30], [1,11,20,30], [3,70,80,90], [1,12,20,30], [1,13,20,30],
     [1,14,20,30]]

  test_consume descr, ts, ts2, [3, nil, nil, nil], 5, [3,70,80,90],
    [[3,70,80,90]],
    [[1,10,20,30], [2,40,50,60], [2,41,50,60], [1,11,20,30],
     [2,42,50,60], [1,12,20,30], [1,13,20,30], [1,14,20,30]]
end


#----------------------------------------------------------------------------
def test_monitor_stream(descr, ts, ts2, template, preload, last_tuple, expected)
  puts "\n::: testing monitor_stream #{template.inspect} in #{descr} :::"

  clear ts
  q = Queue.new

  Thread.new do
    ALL_TUPLES.each_with_index do |tuple, i|
      if i == preload
        q << :start
        sleep 2
      end
      ts2.write tuple
    end
    q << :start if preload == ALL_TUPLES.length
    q << :done
  end

  q.deq  # wait for :start
  result = []
  ts.monitor_stream template do |tuple|
    puts "monitor_stream >> " + tuple.inspect
    result << tuple
    break if tuple == last_tuple
    sleep 0.3
  end

  q.deq  # wait for :done
  assert_equal(result, expected)
end


def test_every_monitor_stream(descr, ts, ts2)
  test_monitor_stream descr, ts, ts2, [], 1, [1,14,20,30], ALL_TUPLES

  test_monitor_stream descr, ts, ts2, [1, nil, nil, nil], 1, [1,14,20,30],
    [[1,10,20,30], [1,11,20,30], [1,12,20,30], [1,13,20,30], [1,14,20,30]]

  test_monitor_stream descr, ts, ts2, [2, nil, nil, nil], 0, [2,42,50,60],
    [[2,40,50,60], [2,41,50,60], [2,42,50,60]]

  test_monitor_stream descr, ts, ts2, [3, nil, nil, nil], 5, [3,70,80,90],
    [[3,70,80,90]]
end


#----------------------------------------------------------------------------
def test_consume_stream(descr, ts, ts2, template, preload, last_tuple, expected,
                        remainder)
  puts "\n::: testing consume_stream #{template.inspect} in #{descr} :::"

  clear ts
  q = Queue.new

  Thread.new do
    ALL_TUPLES.each_with_index do |tuple, i|
      if i == preload
        q << :start
        sleep 2
      end
      ts2.write tuple
    end
    q << :start if preload == ALL_TUPLES.length
    q << :done
  end

  q.deq  # wait for :start
  result = []
  ts.consume_stream template do |tuple|
    puts "consume_stream >> " + tuple.inspect
    result << tuple
    break if tuple == last_tuple
    sleep 0.3
  end

  q.deq  # wait for :done
  assert_equal(result, expected)
  check_remainder ts, remainder
end


def test_every_consume_stream(descr, ts, ts2)
  test_consume_stream descr, ts, ts2, [], 1, [1,14,20,30], ALL_TUPLES, []

  test_consume_stream descr, ts, ts2, [1, nil, nil, nil], 4, [1,14,20,30],
    [[1,10,20,30], [1,11,20,30], [1,12,20,30], [1,13,20,30], [1,14,20,30]],
    [[2,40,50,60], [2,41,50,60], [3,70,80,90], [2,42,50,60]]

  test_consume_stream descr, ts, ts2, [2, nil, nil, nil], 0, [2,42,50,60],
    [[2,40,50,60], [2,41,50,60], [2,42,50,60]],
    [[1,10,20,30], [1,11,20,30], [3,70,80,90], [1,12,20,30], [1,13,20,30],
     [1,14,20,30]]

  test_consume_stream descr, ts, ts2, [3, nil, nil, nil], 3, [3,70,80,90],
    [[3,70,80,90]],
    [[1,10,20,30], [2,40,50,60], [2,41,50,60], [1,11,20,30],
     [2,42,50,60], [1,12,20,30], [1,13,20,30], [1,14,20,30]]
end


#############################################################################

puts "\n\n==[ local ]=======================================================\n"

test_every_read_all "local region", $c1

# The remaining tests may use read_all, so read_all should be correct by now.

test_every_take_all "local region", $c1
test_every_monitor "local region", $c1, $c2
test_every_consume "local region", $c1, $c2
test_every_monitor_stream "local region", $c1, $c2
test_every_consume_stream "local region", $c1, $c2

puts "\n\n==[ global ]======================================================\n"

test_every_take_all "global region", $g1
test_every_read_all "global region", $g1
test_every_monitor "global region", $g1, $g2
test_every_consume "global region", $g1, $g2
test_every_monitor_stream "global region", $g1, $g2
test_every_consume_stream "global region", $g1, $g2

puts "\n\n### SUCCESS."
