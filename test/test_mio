#!/usr/bin/env ruby

#############################################################################
## Tests message encoding/decoding with MIO.
##
## Run from top-level directory: $ ruby -I . test/test_mio
##
#############################################################################

require 'ostruct'
require 'optparse'

require 'test/unit'
require 'ext/mioext'

$options = OpenStruct.new
opts = OptionParser.new

opts.on("--[no-]verbose", TrueClass, "enable verbosity") do |v|
  $options.verbose = v
end

begin
  ARGV.replace opts.parse(*ARGV)
rescue OptionParser::ParseError
  $stderr.puts "ERROR: " + $!.to_s
  $stderr.puts opts
  exit 1
end


#============================================================================

class TestMIO < Test::Unit::TestCase

  B64_DECODE_TBL = {}  # character code => numeric value; e.g., 'A' => 0

  "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".
    unpack("C*").each_with_index do |c, i|
    B64_DECODE_TBL[c] = i
  end


  def check_b64_encoding(s, expected)
    assert_not_nil(s, "b64 encoded string must not be nil")
    if s == "--"
      assert_equal(-9223372036854775808, n)
    else
      assert_match(/^(-)?[A-Za-z0-9\+\/]+$/, s)
      sign = (s[0, 1] == "-" ? -1 : 1)

      n = 0
      s.unpack("C*").each do |c|
        next if c == 45  # '-'
        n <<= 6
        n |= B64_DECODE_TBL[c]
        puts ">> " + n.to_s if $options.verbose
      end

      n = -n if sign < 0
      assert_equal(expected, n)
    end
  end


  # ------------------------------------------------------------------------

  def test_coding_arguments
    assert_raises(ArgumentError) { MIO.encode nil }
    assert_raises(TypeError) { MIO.encode 5 }
    assert_raises(TypeError) { MIO.encode self }

    assert_raises(TypeError) { MIO.decode nil }
    assert_raises(TypeError) { MIO.decode 5 }
    assert_raises(TypeError) { MIO.decode self }
  end


  def test_encode_validator
    check_b64_encoding("B", 1)
    check_b64_encoding("a", 26)
    check_b64_encoding("1", 53)

    check_b64_encoding("EA", 2**8)
    check_b64_encoding("QAA", 2**16)
    check_b64_encoding("BAAAA", 2**24)
    check_b64_encoding("-EA", -2**8)
    check_b64_encoding("-QAA", -2**16)
    check_b64_encoding("-BAAAA", -2**24)
    check_b64_encoding("/////", 2**30-1)  # max
    check_b64_encoding("-BAAAAA", -2**30)  # min

    # 64-bit fixnum or bignum
    check_b64_encoding("EAAAAA", 2**32)
    check_b64_encoding("-EAAAAA", -2**32)
    check_b64_encoding("D//////////", 2**62 - 1)
    check_b64_encoding("-EAAAAAAAAAA", -2**62)

    # bignum
    check_b64_encoding("EAAAAAAAAAA", 2**62)
    check_b64_encoding("H//////////", 2**63 - 1)  # max
  end


  def test_coding_basic_values
    values = [["`E", []],
              ["_", [nil]],
              ["`T", [true]],
              ["`F", [false]],
              ["B", [1]],
              ["$$", [""]],
              ["$Zm9v", ["foo"]],

              # 32-bit fixnum
              ["EA", [2**8]],
              ["QAA", [2**16]],
              ["BAAAA", [2**24]],
              ["-EA", [-2**8]],
              ["-QAA", [-2**16]],
              ["-BAAAA", [-2**24]],
              ["/////", [2**30-1]],   # max
              ["-BAAAAA", [-2**30]],  # min

              # 64-bit fixnum or bignum
              ["EAAAAA", [2**32]],
              ["-EAAAAA", [-2**32]],
              ["D//////////", [2**62 - 1]],
              ["-EAAAAAAAAAA", [-2**62]],

              # bignum
              ["EAAAAAAAAAA", [2**62]],
              ["H//////////", [2**63 - 1]],  # max
              ["--", [-2**63]],              # min

              # floats (checking byte ordering as well as encoding)
              # ".QWeMKdzW6dw=".unpack("m").first.unpack("G")
              [".P/AAAAAAAAA", [1.0]],
              [".P/AAAAAAAAE", [1.0000000000000002]],
              [".QWeMKdzW6dw", [12345678.90123456]],
             ]

    values.each do |encoded, decoded|
      printf "%p == %p\n", encoded, decoded if $options.verbose
      assert_equal(encoded, MIO.encode(decoded))
      assert_equal(decoded, MIO.decode(encoded))
    end

    puts if $options.verbose
    100.times do
      x = rand()  # [0.0, 1.0)
      s = "." + [[x].pack("G")].pack("m").gsub!(/\=\n/, "")
      printf "%f => %s\n", x, s if $options.verbose
      assert_equal(s, MIO.encode([x]))
      assert_equal([x], MIO.decode(s))
    end
  end


  def test_coding_random_b64
    # rand(2**32) - 2**31 => (2**32 - 1) - 2**31   (max)
    #                     => (2**31)(2 - 1) - 1    (max)

    1000.times do
      n = rand(2**32) - 2**31  # => [-2**31, 2**31-1]
      s = MIO.encode [n]
      printf "\n%d => %s\n", n, s if $options.verbose
      check_b64_encoding s, n
      assert_equal([n], MIO.decode(s))
    end

    1000.times do
      n = rand(2**64) - 2**63  # => [-2**63, 2**63-1]
      s = MIO.encode [n]
      printf "\n%d => %s\n", n, s if $options.verbose
      check_b64_encoding s, n
      assert_equal([n], MIO.decode(s))
    end
  end


  def test_coding_flat_array
    values = [["B,C", [1, 2]],
              ["B,C,D", [1, 2, 3]],
              ["B,$Zm9v", [1, "foo"]],
              ["B,$Zm9v,`T,$YmFy", [1, "foo", true, "bar"]],
              ["$Zm9v,$YmFy,$$", ["foo", "bar", ""]],
              ["$Zm9v,$YmFy,$$,$$", ["foo", "bar", "", ""]],
              ["_,C,_,D,_,_", [nil, 2, nil, 3, nil, nil]],
             ]

    values.each do |encoded, decoded|
      printf "%p == %p\n", encoded, decoded if $options.verbose
      assert_equal(encoded, MIO.encode(decoded))
      assert_equal(decoded, MIO.decode(encoded))
    end
  end


  def test_coding_nested_array_level_1
    values = [["()", [[]]],
              ["(_)", [[nil]]],
              ["(q)", [[42]]],
              ["(B,C,D)", [[1, 2, 3]]],
              ["(B,$Zm9v,$YmFy)", [[1, "foo", "bar"]]],

              ["(),()", [[], []]],
              ["(),(),()", [[], [], []]],

              ["(B),C,D", [[1], 2, 3]],
              ["B,(C),D", [1, [2], 3]],
              ["B,C,(D)", [1, 2, [3]]],

              ["B,($Zm9v,$YmFy)", [1, ["foo", "bar"]]],
              ["($Zm9v,$YmFy),$$", [["foo", "bar"], ""]],
              ["($Zm9v,$YmFy),($$,$$)", [["foo", "bar"], ["", ""]]],
              ["(_,C,_),(D),_,(_)", [[nil, 2, nil], [3], nil, [nil]]],
             ]

    values.each do |encoded, decoded|
      printf "%p == %p\n", encoded, decoded if $options.verbose
      assert_equal(encoded, MIO.encode(decoded))
      assert_equal(decoded, MIO.decode(encoded))
    end
  end


  def test_coding_nested_array_level_2
    values = [["(())", [[[]]]],
              ["((_))", [[[nil]]]],
              ["((q))", [[[42]]]],
              ["((B,C,D))", [[[1, 2, 3]]]],
              ["((B,$Zm9v,$YmFy))", [[[1, "foo", "bar"]]]],

              ["((),())", [[[], []]]],
              ["((),(),())", [[[], [], []]]],

              ["((B),C,D)", [[[1], 2, 3]]],
              ["(B,(C),D)", [[1, [2], 3]]],
              ["(B,C,(D))", [[1, 2, [3]]]],

              ["B,(($Zm9v),$YmFy)", [1, [["foo"], "bar"]]],
              ["B,($Zm9v,($YmFy))", [1, ["foo", ["bar"]]]],
              ["B,($Zm9v,(C,D,$YmFy))", [1, ["foo", [2, 3, "bar"]]]],

              ["(($Zm9v,$YmFy),(C,D)),($$,$$)", [[["foo", "bar"], [2, 3]], ["", ""]]],
             ]

    values.each do |encoded, decoded|
      printf "%p == %p\n", encoded, decoded if $options.verbose
      assert_equal(encoded, MIO.encode(decoded))
      assert_equal(decoded, MIO.decode(encoded))
    end
  end


  def test_coding_nested_array_level_n
    values = [["((()))", [[[[]]]]],
              ["(((())))", [[[[[]]]]]],
              ["((((_))))", [[[[[nil]]]]]],
              ["((((q))))", [[[[[42]]]]]],
              ["((((B,C,D))))", [[[[[1, 2, 3]]]]]],
              ["((((B,$Zm9v,$YmFy))))", [[[[[1, "foo", "bar"]]]]]],

              ["(),(()),((())),(((())))", [[], [[]], [[[]]], [[[[]]]]]],
              ["(((()))),((())),(()),()", [[[[[]]]], [[[]]], [[]], []]],

              ["(B,C,D),((E)),(((F,G))),(((($Zm9v))))", [[1, 2, 3], [[4]], [[[5, 6]]], [[[["foo"]]]]]],
            ]

    values.each do |encoded, decoded|
      printf "%p == %p\n", encoded, decoded if $options.verbose
      assert_equal(encoded, MIO.encode(decoded))
      assert_equal(decoded, MIO.decode(encoded))
    end
  end


  def test_encode_limits
    max_str = "X" * MIO::MAX_RAW_VALUE_SIZE

    size = 0
    big_tuple = []
    while size < MIO::MAX_MESSAGE_SIZE
      big_tuple << max_str
      size += MIO::MAX_RAW_VALUE_SIZE
    end

    level = 0
    deep_tuple = []
    while level < MIO::MAX_NESTING
      deep_tuple = [ deep_tuple ]
      level += 1
    end

    assert_nothing_raised(RuntimeError) { MIO.encode [max_str] }
    assert_raises(MIO::EncodeLimitExceeded) {
      MIO.encode [max_str + "!"] }
    assert_raises(MIO::EncodeLimitExceeded) {
      MIO.encode big_tuple }
    assert_nothing_raised(MIO::EncodeLimitExceeded) {
      MIO.encode deep_tuple }
    assert_raises(MIO::EncodeLimitExceeded) {
      MIO.encode [deep_tuple] }
  end

end
